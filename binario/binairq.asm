;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
;                                 binairq.asm                                ;
;                   Binario Game General Interrupt Handlers                  ;
;                                   EE  10b                                  ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Description:      This Assembly file contains the general interrupt handlers 
;                   for the EE 10b Binario game. 
;
; Table of Contents:
;
;   CODE SEGMENT 
;       Switch/encoder debouncing, display muxing interrupt handler 
;           (Timer 0 CTC output compare)
;           Timer0CompareHandler        Calls switch/encoder debouncing and 
;                                       display multiplexing functions on 
;                                       every Timer 0 CTC output compare 
;                                       interrupt.
;       Delay-less music interrupt handler (Timer 3 CTC output compare)
;           Timer3CompareHandler        Calls `PlayMusicNextNote` delay-less 
;                                       music update note function on 
;                                       every Timer 3 CTC output compare
;                                       interrupt.
;
; Revision History:
;    5/16/18    Ray Sun         Initial revision.
;    5/17/18    Ray Sun         Modified `Timer3CompareHandler` to push the 
;                               necessary registers changed by `MuxDisp`
;                               and its subroutines.
;    5/18/18    Ray Sun         Added TOC. 
;    6/06/18    Ray Sun         Pushed/popped correct registers. Merged the two 
;                               Timer3 CTC compare interrupt handlers (switches,
;                               display) together in the same file.
;    6/10/18    Ray Sun         Modified `Timer3CompareHandler` to use Timer 0
;                               to free up Timer 3 to use for playing music
;                               without delaying the processor. Renamed to 
;                               `Timer0CompareHandler`
;    6/12/18    Ray Sun         Added a interrupt handler for delay-less music



; ################################ CODE SEGMENT ################################
.cseg



; Timer0CompareHandler:
;
; Description           This procedure calls the switch debouncing, encoder 
;                       reading, and display multiplexing procedure on every 
;                       CTC compare interrupt generated by Timer2.
;   
; Operation             When Timer3 generates a CTC output compare interrupt
;                       the switch and encoder debouncing functions are called. 
;                       These functions poll the switch and encoder inputs and 
;                       set the corresponding flags for switch presses and 
;                       encoder rotation cycles. Additionally, the display 
;                       muxing procedure `MuxDisp` is called.
;   
; Arguments             None.
; Return Values         None.
;       
; Global Variables      None.
; Shared Variables      See `SwDeb`, `LREncDeb`, `UDEncDeb`, and `MuxDisp`.
; Local Variables       None.
;       
; Inputs                None.
; Outputs               None.
;   
; Error Handling        None.
; Algorithms            None.
; Data Structures       None.
;       
; Limitations           None.
; Known Bugs            None.
; Special Notes         None.
; 
; Registers Changed     None.
; Stack Depth           16 bytes
;
; Author                Ray Sun
; Last Modified         06/10/2018   


Timer0CompareHandler:
    PUSH    ZH                  ; Save Z and Y
    PUSH    ZL
    PUSH    YH
    PUSH    YL
    PUSH    R20                 ; Save all registers used
    PUSH    R19
	PUSH    R18                 
    PUSH    R17
    PUSH    R16
	PUSH    R5      
	PUSH    R4
    PUSH    R3                  
    PUSH    R2
    PUSH    R1 
    PUSH    R0
    IN      R0,     SREG        ; Store status register (flags)
    PUSH    R0
    
    CALL    SwDeb               ; Do switch and encoder debouncing
    CALL    LREncDeb     
    CALL    UDEncDeb
    CALL    MuxDisp             ; Do display multiplexing
    
    ;RJMP    EndTimer0CompareHandler  ; Done, so re-enable interrupts and return
    
EndTimer0CompareHandler:
    POP     R0
    OUT     SREG,   R0          ; Restore flags
    POP     R0                  ; and all pushed registers
    POP     R1
	POP     R2  
    POP     R3 
    POP     R4
    POP     R5
    POP     R16                 
	POP     R17
    POP     R18 
    POP     R19
    POP     R20
    POP     YL                  ; Finally, restore Y and Z
    POP     YH 
    POP     ZL 
    POP     ZH 
    
    RETI                        ; Done, so return and reenable interrupts

    
    
; Timer3CompareHandler:
; 
; Description           This procedure calls the function to update the 
;                       currently played note in delay-less music playing 
;                       on every Timer 3 CTC output compare interrupt.
;   
; Operation             When an output compare interrupt is generated by Timer3,
;                       the function to update the currently played note is 
;                       called. All used registers are saved and interrupts are 
;                       disabled before the call to `PlayMusicNextNote`
;   
; Arguments             None.
; Return Values         None.
;   
; Global Variables      None.
; Shared Variables      None.
; Local Variables       None.
;   
; Inputs                None.
; Outputs               See `PlayMusicNextNote`
;   
; Error Handling        None.
; Algorithms            None.
; Data Structures       None.
;   
; Limitations           None.
; Known Bugs            None.
; Special Notes         None.
; 
; Registers Changed     None
; Stack Depth           13 bytes
;
; Author                Ray Sun
; Last Modified         06/15/2018    


Timer3CompareHandler:
    PUSH    ZH                  ; Save all registers used
    PUSH    ZL
    PUSH    XH
    PUSH    XL
    PUSH    R22
    PUSH    R20                
    PUSH    R19
	PUSH    R18                 
    PUSH    R17
    PUSH    R16
    PUSH    R3
    PUSH    R2
    PUSH    R1
    PUSH    R0
    
    RCALL   PlayMusicNextNote   ; Go play the new note and update OCR2A/B
    
    ;RJMP    EndTimer3CompareHandler
    
EndTimer3CompareHandler:
    POP     R0                  ; Restore all pushed registers
    POP     R1
    POP     R2
    POP     R3
    POP     R16
	POP     R17
    POP     R18 
    POP     R19
    POP     R20
    POP     R22
    POP     XL 
    POP     XH
    POP     ZL                  ; Finally, restore Z
    POP     ZH 
    RETI                        ; Done, so return and reenable interrupts
